%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.9
%%CreationDate: Tue Sep 25 18:31:33 2018
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

%Options: 
% to switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

%%BeginProlog
/RNAplot 100 dict def
RNAplot begin
/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall}        % draw outline of 2nd sequence
  {coor {aload pop lineto} forall}   % draw outline as a whole
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
end
%%EndProlog
RNAplot begin
% data start here
/sequence (\
GGGCGACCCUGAUGAGCUUGGUUGAGUAUUUACAGCUCCAUACAUGAGGUGUUCUCCCUACGCAAGUUCGAUCAGGCGAAACGGUGAAAGCCGUAGGUUGCCC\
) def
/coor [
[92.50000000 242.80111694]
[92.50000000 227.80111694]
[92.50000000 212.80111694]
[92.50000000 197.80111694]
[92.50000000 182.80111694]
[92.50000000 167.80111694]
[92.50000000 152.80111694]
[92.50000000 137.80111694]
[81.58953094 133.85600281]
[72.34761047 126.84249878]
[65.61184692 117.39624786]
[61.99269867 106.37335205]
[61.81818008 94.77284241]
[65.10410309 83.64607239]
[71.55266571 74.00147247]
[80.57942200 66.71313477]
[75.68637848 52.53363419]
[70.79333496 38.35413742]
[65.90029907 24.17463875]
[61.00725555 9.99514198]
[56.11421204 -4.18435478]
[51.22116852 -18.36385155]
[46.32812881 -32.54335022]
[41.43508530 -46.72284698]
[36.54204559 -60.90234375]
[31.64900208 -75.08184052]
[16.87089348 -72.34960175]
[1.85062027 -71.85054016]
[-13.07625771 -73.59581757]
[-27.57626724 -77.54643250]
[-41.32547760 -83.61412811]
[-54.01671982 -91.66335297]
[-65.36647034 -101.51428223]
[-75.12117004 -112.94684601]
[-83.06289673 -125.70562744]
[-89.01422882 -139.50559998]
[-92.84221649 -154.03846741]
[-94.46132660 -168.97955322]
[-93.83540344 -183.99507141]
[-90.97842407 -198.74958801]
[-85.95421600 -212.91343689]
[-78.87501526 -226.17024231]
[-69.89897919 -238.22380066]
[-59.22663879 -248.80485535]
[-47.09641266 -257.67703247]
[-33.77929688 -264.64208984]
[-19.57280159 -269.54443359]
[-4.79430342 -272.27456665]
[10.22603989 -272.77148438]
[25.15266991 -271.02410889]
[39.65211868 -267.07141113]
[53.40045929 -261.00177002]
[66.09055328 -252.95072937]
[77.43890381 -243.09819031]
[87.19197845 -231.66423035]
[95.13188934 -218.90431213]
[101.08125305 -205.10350037]
[104.90716553 -190.57008362]
[106.52415466 -175.62876892]
[105.89609528 -160.61334229]
[103.03701019 -145.85923767]
[98.01078033 -131.69609070]
[90.92969513 -118.44030762]
[81.95194244 -106.38802338]
[71.27809906 -95.80848694]
[59.14660645 -86.93804932]
[45.82849884 -79.97488403]
[50.72154236 -65.79538727]
[55.61458206 -51.61588669]
[60.50762558 -37.43638992]
[65.40066528 -23.25689316]
[70.29370880 -9.07739639]
[75.18675232 5.10210037]
[80.07979584 19.28159714]
[84.97283173 33.46109390]
[89.86587524 47.64059067]
[94.75891876 61.82009125]
[114.46985626 64.28168488]
[130.33644104 76.23291016]
[138.14326477 94.49856567]
[135.81619263 114.22583771]
[148.41268921 122.37007141]
[161.00917053 130.51431274]
[173.60565186 138.65853882]
[186.20213318 146.80278015]
[202.59881592 147.08720398]
[210.31311035 161.55862427]
[201.40921021 175.33006287]
[185.04669189 174.23464966]
[178.05790710 159.39926147]
[165.46142578 151.25502014]
[152.86492920 143.11079407]
[140.26844788 134.96655273]
[127.67196655 126.82231903]
[118.42282104 133.84928894]
[107.50000000 137.80111694]
[107.50000000 152.80111694]
[107.50000000 167.80111694]
[107.50000000 182.80111694]
[107.50000000 197.80111694]
[107.50000000 212.80111694]
[107.50000000 227.80111694]
[107.50000000 242.80111694]
] def
/pairs [
[1 103]
[2 102]
[3 101]
[4 100]
[5 99]
[6 98]
[7 97]
[8 96]
[16 77]
[17 76]
[18 75]
[19 74]
[20 73]
[21 72]
[22 71]
[23 70]
[24 69]
[25 68]
[26 67]
[81 94]
[82 93]
[83 92]
[84 91]
[85 90]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% show it
showpage
end
%%EOF
